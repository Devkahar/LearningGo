package main

import "golang.org/x/tour/tree"
import "fmt"

// Walk walks the tree t sending all values
// from the tree to the channel ch.
func Walk(t *tree.Tree, ch chan int){
	if t==nil{
		return
	}
	Walk(t.Left,ch)
	ch<-t.Value
	Walk(t.Right,ch)
	
}

// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool{
	if t1==nil && t2==nil{
		return true;
	}
	if t1==nil || t2==nil{
		return false;
	}
	if t1.Value != t2.Value{
		return false
	}
	return Same(t1.Left,t2.Left) && Same(t1.Right,t2.Right)
}

func main() {
	ch := make(chan int)
	go Walk(tree.New(1),ch)
	fmt.Println(Same(tree.New(1), tree.New(1)));
	fmt.Println(Same(tree.New(1), tree.New(2)));
	for i:=0;i<10;i++ {
		fmt.Println(<-ch);
	}
	
	

}
